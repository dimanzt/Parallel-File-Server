Tutorials 	| 	Exercises 	| 	Abstracts 	| 	LC Workshops 	| 	Comments 	| 	Search 	| 	Privacy & Legal Notice


POSIX Threads Programming

Author: Blaise Barney, Lawrence Livermore National Laboratory 	UCRL-MI-133316

Table of Contents

    Abstract
    Pthreads Overview
        What is a Thread?
        What are Pthreads?
        Why Pthreads?
        Designing Threaded Programs 
    The Pthreads API
    Compiling Threaded Programs
    Thread Management
        Creating and Terminating Threads
        Passing Arguments to Threads
        Joining and Detaching Threads
        Stack Management
        Miscellaneous Routines 
    Exercise 1
    Mutex Variables
        Mutex Variables Overview
        Creating and Destroying Mutexes
        Locking and Unlocking Mutexes 
    Condition Variables
        Condition Variables Overview
        Creating and Destroying Condition Variables
        Waiting and Signaling on Condition Variables 
    LLNL Specific Information and Recommendations
    Topics Not Covered
    Exercise 2
    References and More Information
    Appendix A: Pthread Library Routines Reference
    Exercise 



Abstract


In shared memory multiprocessor architectures, such as SMPs, threads can be used to implement parallelism. Historically, hardware vendors have implemented their own proprietary versions of threads, making portability a concern for software developers. For UNIX systems, a standardized C language threads programming interface has been specified by the IEEE POSIX 1003.1c standard. Implementations that adhere to this standard are referred to as POSIX threads, or Pthreads.

The tutorial begins with an introduction to concepts, motivations, and design considerations for using Pthreads. Each of the three major classes of routines in the Pthreads API are then covered: Thread Management, Mutex Variables, and Condition Variables. Example codes are used throughout to demonstrate how to use most of the Pthreads routines needed by a new Pthreads programmer. The tutorial concludes with a discussion of LLNL specifics and how to mix MPI with pthreads. A lab exercise, with numerous example codes (C Language) is also included.

Level/Prerequisites: This tutorial is one of the eight tutorials in the 4+ day "Using LLNL's Supercomputers" workshop. It is deal for those who are new to parallel programming with threads. A basic understanding of parallel programming in C is required. For those who are unfamiliar with Parallel Programming in general, the material covered in EC3500: Introduction To Parallel Computing would be helpful.



Pthreads Overview
What is a Thread?

    Technically, a thread is defined as an independent stream of instructions that can be scheduled to run as such by the operating system. But what does this mean?

    To the software developer, the concept of a "procedure" that runs independently from its main program may best describe a thread.

    To go one step further, imagine a main program (a.out) that contains a number of procedures. Then imagine all of these procedures being able to be scheduled to run simultaneously and/or independently by the operating system. That would describe a "multi-threaded" program.

    How is this accomplished? 

    Before understanding a thread, one first needs to understand a UNIX process. A process is created by the operating system, and requires a fair amount of "overhead". Processes contain information about program resources and program execution state, including:
        Process ID, process group ID, user ID, and group ID
        Environment
        Working directory.
        Program instructions
        Registers
        Stack
        Heap
        File descriptors
        Signal actions
        Shared libraries
        Inter-process communication tools (such as message queues, pipes, semaphores, or shared memory). 

    Unix Process 	Process-thread relationship
    UNIX PROCESS 	THREADS WITHIN A UNIX PROCESS

    Threads use and exist within these process resources, yet are able to be scheduled by the operating system and run as independent entities largely because they duplicate only the bare essential resources that enable them to exist as executable code.

    This independent flow of control is accomplished because a thread maintains its own:
        Stack pointer
        Registers
        Scheduling properties (such as policy or priority)
        Set of pending and blocked signals
        Thread specific data. 

    So, in summary, in the UNIX environment a thread:
        Exists within a process and uses the process resources
        Has its own independent flow of control as long as its parent process exists and the OS supports it
        Duplicates only the essential resources it needs to be independently schedulable
        May share the process resources with other threads that act equally independently (and dependently)
        Dies if the parent process dies - or something similar
        Is "lightweight" because most of the overhead has already been accomplished through the creation of its process. 

    Because threads within the same process share resources:
        Changes made by one thread to shared system resources (such as closing a file) will be seen by all other threads.
        Two pointers having the same value point to the same data.
        Reading and writing to the same memory locations is possible, and therefore requires explicit synchronization by the programmer. 



Pthreads Overview
What are Pthreads?

    Historically, hardware vendors have implemented their own proprietary versions of threads. These implementations differed substantially from each other making it difficult for programmers to develop portable threaded applications.

    In order to take full advantage of the capabilities provided by threads, a standardized programming interface was required.
        For UNIX systems, this interface has been specified by the IEEE POSIX 1003.1c standard (1995).
        Implementations adhering to this standard are referred to as POSIX threads, or Pthreads.
        Most hardware vendors now offer Pthreads in addition to their proprietary API's. 

    The POSIX standard has continued to evolve and undergo revisions, including the Pthreads specification.

    Some useful links:
        standards.ieee.org/findstds/standard/1003.1-2008.html
        www.opengroup.org/austin/papers/posix_faq.html
        www.unix.org/version3/ieee_std.html 

    Pthreads are defined as a set of C language programming types and procedure calls, implemented with a pthread.h header/include file and a thread library - though this library may be part of another library, such as libc, in some implementations. 



Pthreads Overview
Why Pthreads?

    The primary motivation for using Pthreads is to realize potential program performance gains.

    When compared to the cost of creating and managing a process, a thread can be created with much less operating system overhead. Managing threads requires fewer system resources than managing processes.

    For example, the following table compares timing results for the fork() subroutine and the pthread_create() subroutine. Timings reflect 50,000 process/thread creations, were performed with the time utility, and units are in seconds, no optimization flags.

    Note: don't expect the sytem and user times to add up to real time, because these are SMP systems with multiple CPUs working on the problem at the same time. At best, these are approximations run on local machines, past and present.

    Platform 	fork() 	pthread_create()
    real 	user 	sys 	real 	user 	sys
    Intel 2.6 GHz Xeon E5-2670 (16cpus/node) 	8.1 	0.1 	2.9 	0.9 	0.2 	0.3
    Intel 2.8 GHz Xeon 5660 (12cpus/node) 	4.4 	0.4 	4.3 	0.7 	0.2 	0.5
    AMD 2.3 GHz Opteron (16cpus/node) 	12.5 	1.0 	12.5 	1.2 	0.2 	1.3
    AMD 2.4 GHz Opteron (8cpus/node) 	17.6 	2.2 	15.7 	1.4 	0.3 	1.3
    IBM 4.0 GHz POWER6 (8cpus/node) 	9.5 	0.6 	8.8 	1.6 	0.1 	0.4
    IBM 1.9 GHz POWER5 p5-575 (8cpus/node) 	64.2 	30.7 	27.6 	1.7 	0.6 	1.1
    IBM 1.5 GHz POWER4 (8cpus/node) 	104.5 	48.6 	47.2 	2.1 	1.0 	1.5
    INTEL 2.4 GHz Xeon (2 cpus/node) 	54.9 	1.5 	20.8 	1.6 	0.7 	0.9
    INTutorials 	| 	Exercises 	| 	Abstracts 	| 	LC Workshops 	| 	Comments 	| 	Search 	| 	Privacy & Legal Notice


POSIX Threads Programming

Author: Blaise Barney, Lawrence Livermore National Laboratory 	UCRL-MI-133316

Table of Contents

    Abstract
    Pthreads Overview
        What is a Thread?
        What are Pthreads?
        Why Pthreads?
        Designing Threaded Programs 
    The Pthreads API
    Compiling Threaded Programs
    Thread Management
        Creating and Terminating Threads
        Passing Arguments to Threads
        Joining and Detaching Threads
        Stack Management
        Miscellaneous Routines 
    Exercise 1
    Mutex Variables
        Mutex Variables Overview
        Creating and Destroying Mutexes
        Locking and Unlocking Mutexes 
    Condition Variables
        Condition Variables Overview
        Creating and Destroying Condition Variables
        Waiting and Signaling on Condition Variables 
    LLNL Specific Information and Recommendations
    Topics Not Covered
    Exercise 2
    References and More Information
    Appendix A: Pthread Library Routines Reference
    Exercise 



Abstract


In shared memory multiprocessor architectures, such as SMPs, threads can be used to implement parallelism. Historically, hardware vendors have implemented their own proprietary versions of threads, making portability a concern for software developers. For UNIX systems, a standardized C language threads programming interface has been specified by the IEEE POSIX 1003.1c standard. Implementations that adhere to this standard are referred to as POSIX threads, or Pthreads.

The tutorial begins with an introduction to concepts, motivations, and design considerations for using Pthreads. Each of the three major classes of routines in the Pthreads API are then covered: Thread Management, Mutex Variables, and Condition Variables. Example codes are used throughout to demonstrate how to use most of the Pthreads routines needed by a new Pthreads programmer. The tutorial concludes with a discussion of LLNL specifics and how to mix MPI with pthreads. A lab exercise, with numerous example codes (C Language) is also included.

Level/Prerequisites: This tutorial is one of the eight tutorials in the 4+ day "Using LLNL's Supercomputers" workshop. It is deal for those who are new to parallel programming with threads. A basic understanding of parallel programming in C is required. For those who are unfamiliar with Parallel Programming in general, the material covered in EC3500: Introduction To Parallel Computing would be helpful.



Pthreads Overview
What is a Thread?

    Technically, a thread is defined as an independent stream of instructions that can be scheduled to run as such by the operating system. But what does this mean?

    To the software developer, the concept of a "procedure" that runs independently from its main program may best describe a thread.

    To go one step further, imagine a main program (a.out) that contains a number of procedures. Then imagine all of these procedures being able to be scheduled to run simultaneously and/or independently by the operating system. That would describe a "multi-threaded" program.

    How is this accomplished? 

    Before understanding a thread, one first needs to understand a UNIX process. A process is created by the operating system, and requires a fair amount of "overhead". Processes contain information about program resources and program execution state, including:
        Process ID, process group ID, user ID, and group ID
        Environment
        Working directory.
        Program instructions
        Registers
        Stack
        Heap
        File descriptors
        Signal actions
        Shared libraries
        Inter-process communication tools (such as message queues, pipes, semaphores, or shared memory). 

    Unix Process 	Process-thread relationship
    UNIX PROCESS 	THREADS WITHIN A UNIX PROCESS

    Threads use and exist within these process resources, yet are able to be scheduled by the operating system and run as independent entities largely because they duplicate only the bare essential resources that enable them to exist as executable code.

    This independent flow of control is accomplished because a thread maintains its own:
        Stack pointer
        Registers
        Scheduling properties (such as policy or priority)
        Set of pending and blocked signals
        Thread specific data. 

    So, in summary, in the UNIX environment a thread:
        Exists within a process and uses the process resources
        Has its own independent flow of control as long as its parent process exists and the OS supports it
        Duplicates only the essential resources it needs to be independently schedulable
        May share the process resources with other threads that act equally independently (and dependently)
        Dies if the parent process dies - or something similar
        Is "lightweight" because most of the overhead has already been accomplished through the creation of its process. 

    Because threads within the same process share resources:
        Changes made by one thread to shared system resources (such as closing a file) will be seen by all other threads.
        Two pointers having the same value point to the same data.
        Reading and writing to the same memory locations is possible, and therefore requires explicit synchronization by the programmer. 



Pthreads Overview
What are Pthreads?

    Historically, hardware vendors have implemented their own proprietary versions of threads. These implementations differed substantially from each other making it difficult for programmers to develop portable threaded applications.

    In order to take full advantage of the capabilities provided by threads, a standardized programming interface was required.
        For UNIX systems, this interface has been specified by the IEEE POSIX 1003.1c standard (1995).
        Implementations adhering to this standard are referred to as POSIX threads, or Pthreads.
        Most hardware vendors now offer Pthreads in addition to their proprietary API's. 

    The POSIX standard has continued to evolve and undergo revisions, including the Pthreads specification.

    Some useful links:
        standards.ieee.org/findstds/standard/1003.1-2008.html
        www.opengroup.org/austin/papers/posix_faq.html
        www.unix.org/version3/ieee_std.html 

    Pthreads are defined as a set of C language programming types and procedure calls, implemented with a pthread.h header/include file and a thread library - though this library may be part of another library, such as libc, in some implementations. 



Pthreads Overview
Why Pthreads?

    The primary motivation for using Pthreads is to realize potential program performance gains.

    When compared to the cost of creating and managing a process, a thread can be created with much less operating system overhead. Managing threads requires fewer system resources than managing processes.

    For example, the following table compares timing results for the fork() subroutine and the pthread_create() subroutine. Timings reflect 50,000 process/thread creations, were performed with the time utility, and units are in seconds, no optimization flags.

    Note: don't expect the sytem and user times to add up to real time, because these are SMP systems with multiple CPUs working on the problem at the same time. At best, these are approximations run on local machines, past and present.

    Platform 	fork() 	pthread_create()
    real 	user 	sys 	real 	user 	sys
    Intel 2.6 GHz Xeon E5-2670 (16cpus/node) 	8.1 	0.1 	2.9 	0.9 	0.2 	0.3
    Intel 2.8 GHz Xeon 5660 (12cpus/node) 	4.4 	0.4 	4.3 	0.7 	0.2 	0.5
    AMD 2.3 GHz Opteron (16cpus/node) 	12.5 	1.0 	12.5 	1.2 	0.2 	1.3
    AMD 2.4 GHz Opteron (8cpus/node) 	17.6 	2.2 	15.7 	1.4 	0.3 	1.3
    IBM 4.0 GHz POWER6 (8cpus/node) 	9.5 	0.6 	8.8 	1.6 	0.1 	0.4
    IBM 1.9 GHz POWER5 p5-575 (8cpus/node) 	64.2 	30.7 	27.6 	1.7 	0.6 	1.1
    IBM 1.5 GHz POWER4 (8cpus/node) 	104.5 	48.6 	47.2 	2.1 	1.0 	1.5
    INTEL 2.4 GHz Xeon (2 cpus/node) 	54.9 	1.5 	20.8 	1.6 	0.7 	0.9
    IN